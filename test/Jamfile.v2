# Copyright (c) 2018 Emil Dotchevski
# Copyright (c) 2018 Second Spectrum, Inc.

# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

project
    : requirements
        <toolset>gcc:<cxxflags>"-std=c++11 -Wno-delete-non-virtual-dtor -Wno-parentheses"
        <toolset>gcc:<linkflags>"-pthread"
        <toolset>darwin:<cxxflags>"-std=c++11 -Wno-unused-variable -Wno-delete-non-virtual-dtor -Wno-non-virtual-dtor -Wno-dangling-else"
		<toolset>msvc:<cxxflags>"-wd 4267 -wd 4996 -wd 4244"
		<include>../../..
    ;

compile _hpp_all_test.cpp ;
compile _hpp_capture_exception_test.cpp ;
compile _hpp_capture_result_test.cpp ;
compile _hpp_common_test.cpp ;
compile _hpp_error_test.cpp ;
compile _hpp_exception_to_result_test.cpp ;
compile _hpp_handle_test.cpp ;
compile _hpp_preload_test.cpp ;
compile _hpp_result_test.cpp ;
compile _hpp_throw_test.cpp ;
compile _hpp_try_test.cpp ;

compile-fail is_error_type_fail_test.cpp ;

run capture_exception_async_test.cpp ;
run capture_exception_state_test.cpp ;
run capture_exception_unload_test.cpp ;
run capture_result_async_test.cpp ;
run capture_result_state_test.cpp ;
run capture_result_unload_test.cpp ;
run defer_basic_test.cpp ;
run defer_nested_error_exception_test.cpp ;
run defer_nested_error_result_test.cpp ;
run defer_nested_new_error_exception_test.cpp ;
run defer_nested_new_error_result_test.cpp ;
run defer_nested_success_exception_test.cpp ;
run defer_nested_success_result_test.cpp ;
run diagnostic_output_test.cpp ;
run function_traits_test.cpp ;
run handle_all_test.cpp ;
run handle_some_basic_test.cpp ;
run handle_some_test.cpp ;
run is_error_type_test.cpp ;
run optional_test.cpp ;
run preload_basic_test.cpp ;
run preload_nested_error_exception_test.cpp ;
run preload_nested_error_result_test.cpp ;
run preload_nested_new_error_exception_test.cpp ;
run preload_nested_new_error_result_test.cpp ;
run preload_nested_success_exception_test.cpp ;
run preload_nested_success_result_test.cpp ;
run print_test.cpp ;
run result_bad_result_test.cpp ;
run result_state_test.cpp ;
run static_store_deduction_test.cpp ;
run static_store_test.cpp ;
run try_exception_test.cpp ;
run try_test.cpp ;

exe capture_eh : ../example/capture_eh.cpp : <threading>multi ;
exe capture_result : ../example/capture_result.cpp : <threading>multi ;
exe exception_to_result : ../example/exception_to_result.cpp ;
#exe lua_callback_result : ../example/exception_to_result.cpp ;
#exe lua_callback_eh : ../example/lua_callback_eh.cpp ;
exe print_file_eh : ../example/print_file_eh.cpp ;
exe print_file_result : ../example/print_file_result.cpp ;
exe print_half : ../example/print_half.cpp ;
